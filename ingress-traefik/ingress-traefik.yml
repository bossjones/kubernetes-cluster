# SOURCE: https://github.com/dusansusic/kubernetes-traefik/blob/master/deployment.yaml
# SOURCE: https://medium.com/@dusansusic/traefik-ingress-controller-for-k8s-c1137c9c05c4
# ---
# apiVersion: v1
# kind: Namespace
# metadata:
#   name: traefik
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: traefik-ingress-controller
  # namespace: traefik
  namespace: kube-system
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: traefik-ingress-controller
rules:
- apiGroups:
  - ""
  resources:
  - services
  - endpoints
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - ingresses/status
  verbs:
  - update
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: traefik-ingress-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik-ingress-controller
subjects:
- kind: ServiceAccount
  name: traefik-ingress-controller
  # namespace: traefik infra-traefik
  namespace: kube-system
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: traefik-ingress-controller
  # namespace: traefik
  namespace: kube-system
  labels:
    k8s-app: traefik-ingress
    boss-part-of: traefik-ingress
spec:
  # DISABLED # replicas: 2
  replicas: 3
  selector:
    matchLabels:
      k8s-app: traefik-ingress
  template:
    metadata:
      labels:
        k8s-app: traefik-ingress
        name: traefik-ingress
        boss-part-of: traefik-ingress
    spec:
      # SOURCE: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
      nodeSelector:
        kubernetes.io/hostname: "k8s-head"
      serviceAccountName: traefik-ingress-controller
      terminationGracePeriodSeconds: 35
      volumes:
        - name: traefik-ui-tls-cert
          secret:
            secretName: traefik-ui-tls-cert
        - name: traefik-configmap
          configMap:
            name: traefik-configmap
      containers:
      - image: traefik:v1.7.6-alpine
        name: traefik-ingress
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 200m
            memory: 384Mi
          requests:
            cpu: 25m
            memory: 128Mi
        # TODO: Re-enable this when we're ready. This means each application will need to specify /ping as an endpoint
        # livenessProbe:
        #   failureThreshold: 2
        #   httpGet:
        #     path: /ping
        #     port: 80
        #     scheme: HTTP
        #   initialDelaySeconds: 10
        #   periodSeconds: 5
        # readinessProbe:
        #   failureThreshold: 2
        #   httpGet:
        #     path: /ping
        #     port: 80
        #     scheme: HTTP
        #   periodSeconds: 5
        volumeMounts:
          - mountPath: "/ssl"
            name: "traefik-ui-tls-cert"
          - mountPath: "/config"
            name: "traefik-configmap"
        ports:
        - name: http
          containerPort: 80
        - name: https
          containerPort: 443
        - name: dashboard
          containerPort: 8080
        args:
        - --logLevel=INFO
        - --configfile=/config/traefik.toml
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: traefik-configmap
  # namespace: traefik
  namespace: kube-system
data:
  traefik.toml: |
    defaultEntryPoints = ["http","https"]

    [entryPoints]

      [entryPoints.http]
      address = ":80"


      [entryPoints.https]
      address = ":443"
        [entryPoints.https.tls]
          [[entryPoints.https.tls.certificates]]
          CertFile = "/ssl/tls.crt"
          KeyFile = "/ssl/tls.key"

      [entryPoints.traefik]
        address = ":8080"
        [entryPoints.traefik.auth.basic]
        users = ["admin:$apr1$Ucncoj0y$..EGVyVbLUkmdL0X9/rGN/"]

    # NOTE: Defining Kubernetes Ingress endpoint is done by defining publishService and it must contain values of namespace and name of Traefik service . In this case, that is traefik/traefik.
    [kubernetes]
      [kubernetes.ingressEndpoint]
        # publishedService = "traefik/traefik"
        publishedService = "kube-system/traefik"

    [ping]
    entryPoint = "http"

    [api]
    entryPoint = "traefik"
#---
#apiVersion: v1
#kind: Secret
#metadata:
#  name: traefik-ui-tls-cert
#  namespace: traefik
#  namespakube-system
#  labels:
#    k8s-app: traefik-ingress
#type: kubernetes.io/tls
#data:
#  tls.crt: #cat cert | base64 -w0
#  tls.key: #cat key | base64 -w0
---
kind: Service
apiVersion: v1
metadata:
  name: traefik
  # namespace: traefik
  namespace: kube-system
  annotations: {}
    # service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
spec:
  selector:
    k8s-app: traefik-ingress
  ports:
  - protocol: TCP
    port: 80
    name: http
  - protocol: TCP
    port: 443
    name: https
  - protocol: TCP
    port: 8080
    name: admin
  # type: LoadBalancer
  type: NodePort

# ----------------------------------------------------------------------
# BEGIN: Create dashboard ui
# ----------------------------------------------------------------------
---
kind: Service
apiVersion: v1
metadata:
  name: traefik-dashboard
  # namespace: traefik
  namespace: kube-system
spec:
  selector:
    k8s-app: traefik-ingress
  ports:
  # FIXME: NOTE THIS IS THE ORIGINAL # - port: 8080
  - port: 80
    name: dashboard
    targetPort: 8080
---
kind: Ingress
apiVersion: extensions/v1beta1
metadata:
  name: traefik-dashboard-ingress
  # namespace: traefik
  namespace: kube-system
  annotations:
    kubernetes.io/ingress.class: traefik
    traefik.ingress.kubernetes.io/frontend-entry-points: http,https
    traefik.ingress.kubernetes.io/redirect-entry-point: https
    traefik.ingress.kubernetes.io/redirect-permanent: "true"
spec:
  rules:
  - host: traefik-ui.scarlettlab.com
    http:
      paths:
      - path: /
        backend:
          serviceName: traefik-dashboard
          # servicePort: 8080
          servicePort: dashboard
